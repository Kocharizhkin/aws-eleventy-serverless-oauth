# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: f0u1q
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: f0u1q
service: serverless-oauth
provider:
  name: aws
  runtime: nodejs18.x
  environment:
      NETLIFY_OAUTH_CLIENT_ID: ${env:NETLIFY_OAUTH_CLIENT_ID}
      NETLIFY_OAUTH_CLIENT_SECRET: ${env:NETLIFY_OAUTH_CLIENT_SECRET}
      GITHUB_OAUTH_CLIENT_ID: ${env:GITHUB_OAUTH_CLIENT_ID}
      GITHUB_OAUTH_CLIENT_SECRET: ${env:GITHUB_OAUTH_CLIENT_SECRET}
      GITLAB_OAUTH_CLIENT_ID: ${env:GITLAB_OAUTH_CLIENT_ID}
      GITLAB_OAUTH_CLIENT_SECRET: ${env:GITLAB_OAUTH_CLIENT_SECRET}
      SLACK_OAUTH_CLIENT_ID: ${env:SLACK_OAUTH_CLIENT_ID}
      SLACK_OAUTH_CLIENT_SECRET: ${env:SLACK_OAUTH_CLIENT_SECRET}
      LINKEDIN_OAUTH_CLIENT_ID: ${env:LINKEDIN_OAUTH_CLIENT_ID}
      LINKEDIN_OAUTH_CLIENT_SECRET: ${env:LINKEDIN_OAUTH_CLIENT_SECRET}
      BUCKET_NAME: ${env:BUCKET_NAME}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'iam:PassRole'
          Resource:
            - !GetAtt CloudFormationExecutionRole.Arn

        - Effect: Allow
          Action:
            - 'cloudformation:ValidateTemplate'
          Resource: '*'
          Sid: ValidateCloudFormation

        - Effect: Allow
          Action:
            - 'cloudformation:CreateChangeSet'
            - 'cloudformation:CreateStack'
            - 'cloudformation:DeleteChangeSet'
            - 'cloudformation:DeleteStack'
            - 'cloudformation:DescribeChangeSet'
            - 'cloudformation:DescribeStackEvents'
            - 'cloudformation:DescribeStackResource'
            - 'cloudformation:DescribeStackResources'
            - 'cloudformation:DescribeStacks'
            - 'cloudformation:ExecuteChangeSet'
            - 'cloudformation:ListStackResources'
            - 'cloudformation:SetStackPolicy'
            - 'cloudformation:UpdateStack'
            - 'cloudformation:UpdateTerminationProtection'
            - 'cloudformation:GetTemplate'
          Resource:
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*'
          Sid: ExecuteCloudFormation

        - Effect: Allow
          Action:
            - 'lambda:Get*'
            - 'lambda:List*'
          Resource: '*'
          Sid: ReadLambda

        - Effect: Allow
          Action:
            - 's3:CreateBucket'
            - 's3:DeleteBucket'
            - 's3:ListBucket'
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            - 's3:GetBucketPolicy'
            - 's3:PutBucketPolicy'
            - 's3:DeleteBucketPolicy'
            - 's3:PutBucketAcl'
            - 's3:GetEncryptionConfiguration'
            - 's3:PutEncryptionConfiguration'
          Resource:
            - !Sub 'arn:aws:s3:::*'
          Sid: ManageSlsDeploymentBucket

        - Effect: Allow
          Action:
            - 's3:List*'
          Resource: '*'
          Sid: ListS3

resources:
  Resources:
    SiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BUCKET_NAME}

    CloudFormationExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CloudFormationExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: 
                  - cloudformation.amazonaws.com
              Action: 'sts:AssumeRole'
        Policies:
          - PolicyName: CloudFormationPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'ec2:*'
                    - 's3:*'
                  Resource: '*'

functions:
  edge:
    handler: serverless/edge/index.handler
    events:
      - http:
          path: /
          method: get
      - http:
          path: /secure
          method: get

  auth-before:
    handler: serverless/edge/auth-before.handler
    events:
      - http:
          path: /auth_before
          method: get

  auth-callback:
    handler: serverless/edge/auth-callback.handler
    events:
      - http:
          path: /auth_callback
          method: get
          cors: true

plugins:
  - serverless-s3-sync
# Uncomment for local development
#  - serverless-s3-local
#  - serverless-offline

custom:
  s3Sync:
    - bucketName: eleventy-f0u1q
      localDir: _site